q
value
root
q
root
q
y
type
tree
q
tree
q
data
tree
q
tree
q
header
q
y
tree
q
tree[4].flatten
tree[4]
type
typer
tree
q
tree
q
type
parent
tree
q
y
parent
tree
q
tree
q
data
tree
q
tree
q
y
type
parent
parent, = tree.find { |_, v| v[0].include?(-1) }
header
tree
q
quit
tree
data
q
tree[type] = [Array.new(header[0], -1), Array.new(header[1], -1)]
header
data
q
v
k
k,v= {'a' => 1}.to_a
v
k
k,v= {'a' => 1}
{}.values.map(&:first).flatten.include?(0)
{}.values.map(&:first).flatten
{}.values.map(&:first)
tree
tree['A'][0] << 'B'
tree['A'][0].shift
tree['A'][0].shit
tree['A'][0]
tree['A']
tree['A]
tree
tree.values.map(&:first).flatten.include? 0
tree.values.map(&:first).flatten
tree.values.map(&:first)
tree.values
tree
