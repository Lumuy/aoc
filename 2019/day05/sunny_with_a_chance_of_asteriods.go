package main

import (
	"fmt"
	"strconv"
	"strings"
)

func getInput(input string) (res []int) {
	for _, s := range strings.Split(input, ",") {
		add, _ := strconv.Atoi(s)
		res = append(res, add)
	}

	return res
}

func fetchValue(data []int, pos int, mode int) (int, bool) {
	if mode == 0 {
		return data[pos], true
	} else if mode == 1 {
		return pos, true
	}
	return 0, false
}

func getDiagnosticCode(input string, id int) int {
	var res []string
	status := true
	data := getInput(input)

	for i := 0; status; {
		v := data[i]
		a, x := v/10000, v%10000
		b, x := x/1000, x%1000
		c, de := x/100, x%100
		if a != 0 {
			fmt.Println("Error destination mode")
		}

		switch de {
		case 1:
			l, _ := fetchValue(data, data[i+1], c)
			r, _ := fetchValue(data, data[i+2], b)
			d := data[i+3]

			data[d] = l + r
			i += 4
		case 2:
			l, _ := fetchValue(data, data[i+1], c)
			r, _ := fetchValue(data, data[i+2], b)
			d := data[i+3]

			data[d] = l * r
			i += 4
		case 3:
			d := data[i+1]
			data[d] = id
			i += 2
		case 4:
			v, _ = fetchValue(data, data[i+1], c)
			i += 2
			res = append(res, strconv.Itoa(v))
		case 5:
			v1, _ := fetchValue(data, data[i+1], c)
			v2, _ := fetchValue(data, data[i+2], b)
			if v1 != 0 {
				i = v2
			} else {
				i += 3
			}
		case 6:
			v1, _ := fetchValue(data, data[i+1], c)
			v2, _ := fetchValue(data, data[i+2], b)
			if v1 == 0 {
				i = v2
			} else {
				i += 3
			}
		case 7:
			v1, _ := fetchValue(data, data[i+1], c)
			v2, _ := fetchValue(data, data[i+2], b)
			v3 := data[i+3]
			if v1 < v2 {
				data[v3] = 1
			} else {
				data[v3] = 0
			}
			i += 4
		case 8:
			v1, _ := fetchValue(data, data[i+1], c)
			v2, _ := fetchValue(data, data[i+2], b)
			v3 := data[i+3]
			if v1 == v2 {
				data[v3] = 1
			} else {
				data[v3] = 0
			}
			i += 4
		case 99:
			status = false
		default:
			fmt.Println("Unknown opcode: ", a, b, c, de)
			status = false
		}
	}

	code, _ := strconv.Atoi(strings.Join(res[:], ""))
	return code
}

func main() {
	// Part 1
	fmt.Println(getDiagnosticCode(input, 1))
	// Part 2
	fmt.Println(getDiagnosticCode(input, 5))
}

const input string = `3,225,1,225,6,6,1100,1,238,225,104,0,1102,72,20,224,1001,224,-1440,224,4,224,102,8,223,223,1001,224,5,224,1,224,223,223,1002,147,33,224,101,-3036,224,224,4,224,102,8,223,223,1001,224,5,224,1,224,223,223,1102,32,90,225,101,65,87,224,101,-85,224,224,4,224,1002,223,8,223,101,4,224,224,1,223,224,223,1102,33,92,225,1102,20,52,225,1101,76,89,225,1,117,122,224,101,-78,224,224,4,224,102,8,223,223,101,1,224,224,1,223,224,223,1102,54,22,225,1102,5,24,225,102,50,84,224,101,-4600,224,224,4,224,1002,223,8,223,101,3,224,224,1,223,224,223,1102,92,64,225,1101,42,83,224,101,-125,224,224,4,224,102,8,223,223,101,5,224,224,1,224,223,223,2,58,195,224,1001,224,-6840,224,4,224,102,8,223,223,101,1,224,224,1,223,224,223,1101,76,48,225,1001,92,65,224,1001,224,-154,224,4,224,1002,223,8,223,101,5,224,224,1,223,224,223,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,1107,677,226,224,1002,223,2,223,1005,224,329,101,1,223,223,7,677,226,224,102,2,223,223,1005,224,344,1001,223,1,223,1107,226,226,224,1002,223,2,223,1006,224,359,1001,223,1,223,8,226,226,224,1002,223,2,223,1006,224,374,101,1,223,223,108,226,226,224,102,2,223,223,1005,224,389,1001,223,1,223,1008,226,226,224,1002,223,2,223,1005,224,404,101,1,223,223,1107,226,677,224,1002,223,2,223,1006,224,419,101,1,223,223,1008,226,677,224,1002,223,2,223,1006,224,434,101,1,223,223,108,677,677,224,1002,223,2,223,1006,224,449,101,1,223,223,1108,677,226,224,102,2,223,223,1006,224,464,1001,223,1,223,107,677,677,224,102,2,223,223,1005,224,479,101,1,223,223,7,226,677,224,1002,223,2,223,1006,224,494,1001,223,1,223,7,677,677,224,102,2,223,223,1006,224,509,101,1,223,223,107,226,677,224,1002,223,2,223,1006,224,524,1001,223,1,223,1007,226,226,224,102,2,223,223,1006,224,539,1001,223,1,223,108,677,226,224,102,2,223,223,1005,224,554,101,1,223,223,1007,677,677,224,102,2,223,223,1006,224,569,101,1,223,223,8,677,226,224,102,2,223,223,1006,224,584,1001,223,1,223,1008,677,677,224,1002,223,2,223,1006,224,599,1001,223,1,223,1007,677,226,224,1002,223,2,223,1005,224,614,101,1,223,223,1108,226,677,224,1002,223,2,223,1005,224,629,101,1,223,223,1108,677,677,224,1002,223,2,223,1005,224,644,1001,223,1,223,8,226,677,224,1002,223,2,223,1006,224,659,101,1,223,223,107,226,226,224,102,2,223,223,1005,224,674,101,1,223,223,4,223,99,226`
